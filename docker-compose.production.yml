version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: lis_saas_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-lis_saas_db}
      POSTGRES_USER: ${DB_USER:-lis_saas_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-lis_saas_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    networks:
      - lis_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-lis_saas_user} -d ${DB_NAME:-lis_saas_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lis_saas_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - lis_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: lis_saas_backend
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=lis_project.settings_saas
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-lis_saas_db}
      - DB_USER=${DB_USER:-lis_saas_user}
      - DB_PASSWORD=${DB_PASSWORD:-lis_saas_password}
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@lis-saas.de}
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: lis_saas_celery_worker
    restart: unless-stopped
    command: celery -A lis_project worker -l info --concurrency=4
    environment:
      - DJANGO_SETTINGS_MODULE=lis_project.settings_saas
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-lis_saas_db}
      - DB_USER=${DB_USER:-lis_saas_user}
      - DB_PASSWORD=${DB_PASSWORD:-lis_saas_password}
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lis_network

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: lis_saas_celery_beat
    restart: unless-stopped
    command: celery -A lis_project beat -l info
    environment:
      - DJANGO_SETTINGS_MODULE=lis_project.settings_saas
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-lis_saas_db}
      - DB_USER=${DB_USER:-lis_saas_user}
      - DB_PASSWORD=${DB_PASSWORD:-lis_saas_password}
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lis_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lis_saas_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - lis_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (if using React/Vue)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: lis_saas_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_ENVIRONMENT=production
    networks:
      - lis_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lis_saas_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lis_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lis_saas_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - lis_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  lis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16