version: '3.8'

services:
  # PostgreSQL Database with Production Settings
  postgres:
    image: postgres:15-alpine
    container_name: lis_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./infrastructure/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./infrastructure/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    networks:
      - lis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache with Production Settings
  redis:
    image: redis:7-alpine
    container_name: lis_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    networks:
      - lis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp

  # Elasticsearch with Production Settings
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: lis_elasticsearch_prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - cluster.name=lis-cluster-prod
      - node.name=lis-node-prod
      - bootstrap.memory_lock=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certificates/elasticsearch.key
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certificates/elasticsearch.crt
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./infrastructure/elasticsearch/certificates:/usr/share/elasticsearch/config/certificates:ro
      - ./infrastructure/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "127.0.0.1:9200:9200"  # Bind to localhost only
      - "127.0.0.1:9300:9300"
    networks:
      - lis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f -k https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  # Mirth Connect for LDT Integration
  mirth:
    image: nextgenhealthcare/connect:4.4.0
    container_name: lis_mirth_prod
    environment:
      - MIRTH_DB_HOST=postgres
      - MIRTH_DB_PORT=5432
      - MIRTH_DB_NAME=mirthdb
      - MIRTH_DB_USER=${MIRTH_DB_USER}
      - MIRTH_DB_PASSWORD=${MIRTH_DB_PASSWORD}
      - MIRTH_ADMIN_PASSWORD=${MIRTH_ADMIN_PASSWORD}
      - MIRTH_LICENSE_KEY=${MIRTH_LICENSE_KEY}
      - MIRTH_TIMEZONE=UTC
    volumes:
      - mirth_data:/opt/connect/appdata
      - mirth_logs:/opt/connect/logs
      - ./infrastructure/mirth/conf:/opt/connect/conf:ro
      - ./infrastructure/mirth/channels:/opt/connect/channels:ro
      - ./infrastructure/mirth/custom:/opt/connect/custom:ro
    ports:
      - "127.0.0.1:8080:8080"  # Mirth Connect Admin
      - "127.0.0.1:8443:8443"  # Mirth Connect HTTPS
      - "127.0.0.1:6661:6661"  # Mirth Connect Listener
    networks:
      - lis_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/users/_me"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp

  # Django Backend with Production Settings
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: lis_backend_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ELASTICSEARCH_URL=https://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - MIRTH_URL=http://mirth:8080
      - MIRTH_USERNAME=${MIRTH_USERNAME}
      - MIRTH_PASSWORD=${MIRTH_PASSWORD}
    volumes:
      - ./backend:/app:ro
      - backend_static:/app/staticfiles
      - backend_media:/app/media
      - backend_logs:/app/logs
      - ./infrastructure/backend/certs:/app/certs:ro
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only
    networks:
      - lis_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      mirth:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: lis_celery_worker_prod
    command: celery -A lis_project worker -l info --concurrency=4 --max-tasks-per-child=1000
    environment:
      - DEBUG=False
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ELASTICSEARCH_URL=https://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200
      - MIRTH_URL=http://mirth:8080
      - MIRTH_USERNAME=${MIRTH_USERNAME}
      - MIRTH_PASSWORD=${MIRTH_PASSWORD}
    volumes:
      - ./backend:/app:ro
      - backend_logs:/app/logs
      - ./infrastructure/backend/certs:/app/certs:ro
    networks:
      - lis_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mirth:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: lis_celery_beat_prod
    command: celery -A lis_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=False
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ELASTICSEARCH_URL=https://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200
    volumes:
      - ./backend:/app:ro
      - backend_logs:/app/logs
      - ./infrastructure/backend/certs:/app/certs:ro
    networks:
      - lis_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # React Frontend with Production Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: lis_frontend_prod
    environment:
      - REACT_APP_API_URL=${FRONTEND_API_URL}
      - REACT_APP_WS_URL=${FRONTEND_WS_URL}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_VERSION=${APP_VERSION}
    volumes:
      - ./frontend:/app:ro
      - /app/node_modules
    ports:
      - "127.0.0.1:3000:80"  # Bind to localhost only
    networks:
      - lis_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: lis_nginx_prod
    volumes:
      - ./infrastructure/nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - backend_static:/var/www/static
      - backend_media:/var/www/media
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - lis_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/log/nginx

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: lis_prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/prometheus/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      - ./infrastructure/prometheus/rules:/etc/prometheus/rules:ro
    ports:
      - "127.0.0.1:9090:9090"  # Bind to localhost only
    networks:
      - lis_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: lis_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${GRAFANA_FROM_EMAIL}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./infrastructure/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    ports:
      - "127.0.0.1:3001:3000"  # Bind to localhost only
    networks:
      - lis_network
    depends_on:
      - prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Alertmanager for Prometheus Alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: lis_alertmanager_prod
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=${ALERTMANAGER_EXTERNAL_URL}'
    volumes:
      - ./infrastructure/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "127.0.0.1:9093:9093"  # Bind to localhost only
    networks:
      - lis_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Node Exporter for System Metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: lis_node_exporter_prod
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    ports:
      - "127.0.0.1:9100:9100"  # Bind to localhost only
    networks:
      - lis_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: lis_cadvisor_prod
    command:
      - '--docker_only=true'
      - '--disable_metrics=disk,diskIO'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "127.0.0.1:8080:8080"  # Bind to localhost only
    networks:
      - lis_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true

  # Log Aggregation with ELK Stack
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: lis_logstash_prod
    environment:
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - ./infrastructure/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./infrastructure/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./infrastructure/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - logstash_data:/usr/share/logstash/data
    ports:
      - "127.0.0.1:5044:5044"  # Beats input
      - "127.0.0.1:9600:9600"  # API
    networks:
      - lis_network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Filebeat for Log Collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: lis_filebeat_prod
    user: root
    volumes:
      - ./infrastructure/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./infrastructure/filebeat/modules.d:/usr/share/filebeat/modules.d:ro
      - backend_logs:/var/log/backend:ro
      - frontend_logs:/var/log/frontend:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - lis_network
    depends_on:
      - logstash
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: lis_backup_prod
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./infrastructure/backup/scripts:/backup:ro
      - backup_data:/backups
    networks:
      - lis_network
    depends_on:
      - postgres
    restart: "no"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/postgres_data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/redis_data
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/elasticsearch_data
  mirth_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/mirth_data
  mirth_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/mirth_logs
  backend_static:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/backend_static
  backend_media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/backend_media
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/backend_logs
  frontend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/frontend_logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/nginx_logs
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/prometheus_data
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/grafana_data
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/alertmanager_data
  logstash_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/logstash_data
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/lis/backup_data

networks:
  lis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: lis-br0
    enable_ipv6: false